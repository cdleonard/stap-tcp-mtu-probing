#! /usr/bin/env stap

// config-like macros:

// Only trace sockets for which icsk_mtup.enabled is set to true
@define ONLY_TRACE_MTUP_ENABLED %(0%)

// Only trace sockets with the following port (either sport or dport):
@define ONLY_TRACE_TCP_PORT %(5001%)
//@define ONLY_TRACE_TCP_PORT %(0%)

// Trace conversion between mtu and mss
@define TRACE_MTU_MSS_CONV %(0%)

// Trace tcp_sync_mss
@define TRACE_SYNC_MSS %(1%)

probe begin {
    println("hello tcp-mtu-probing.stp");
}

probe end {
    println("ended tcp-mtu-probing.stp");
}

function cast_sock(sk) {
    return &@cast(sk, "sock", "kernel<net/sock.h>");
}

function sock_net(sk) {
    return cast_sock(sk)->__sk_common->skc_net->net;
}

function sk_common(sk) {
    return &cast_sock(sk)->__sk_common;
}

function sk_family(sk) {
    return sk_common(sk)->skc_family;
}

function sk_type(sk) {
    return cast_sock(sk)->sk_type;
}

function inet_sk(sk) {
    return &@cast(sk, "inet_sock", "kernel<net/inet_sock.h>");
}

function inet_sport(sk) {
    return ntohs(inet_sk(sk)->inet_sport);
}

function inet_dport(sk) {
    return ntohs(sk_common(sk)->skc_dport);
}

function inet_csk(sk) {
    return &@cast(sk, "inet_connection_sock", "kernel<net/inet_connection_sock.h>");
}

function tcp_sk(sk) {
    return &@cast(sk, "tcp_sock", "kernel<linux/tcp.h>");
}

function interesting_sk(sk) {
    if (!sk)
        return 0;
    /* AF_INET SOCK_STREAM */
    if (sk_family(sk) != 2 || sk_type(sk) != 1)
        return 0;
    %( @ONLY_TRACE_MTUP_ENABLED == 1 %?
        if (!inet_csk(sk)->icsk_mtup->enabled)
            return 0;
    %:%)
    %( @ONLY_TRACE_TCP_PORT != 0 %?
        sport = inet_sport(sk);
        dport = inet_dport(sk);
        return(sport == @ONLY_TRACE_TCP_PORT || dport == @ONLY_TRACE_TCP_PORT);
    %:
        return 1;
    %)
}

function ihdr:string() {
    return sprintf("%-*s -> %s", 2*indent_depth(+1), "", ppfunc());
}

function ohdr:string() {
    return sprintf("%-*s <- %s", 2*indent_depth(-1), "", ppfunc());
}

function ehdr:string() {
    return sprintf("%-*s == %s", 2*indent_depth(0), "", ppfunc());
}

function ehdrl() {
    return sprintf("%-*s == %s", 2*indent_depth(0), "", pp());
}

probe
        kernel.function("__tcp_push_pending_frames"),
        kernel.function("ip_output"),
        kernel.function("tcp_push"),
        kernel.function("tcp_push_one"),
        kernel.function("tcp_rcv_established"),
        kernel.function("tcp_write_wakeup"),
        kernel.function("tcp_write_xmit")
{
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: sk=%p caller: %s parms: %s\n", ihdr(), sk, caller(), $$parms);
    }
}

probe
        kernel.function("__tcp_push_pending_frames").return,
        kernel.function("ip_output").return,
        kernel.function("tcp_push").return,
        kernel.function("tcp_push_one").return,
        kernel.function("tcp_rcv_established").return,
        kernel.function("tcp_write_wakeup").return,
        kernel.function("tcp_write_xmit").return
{
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: sk=%p\n", ohdr(), sk);
    }
}

probe kernel.function("tcp_sendmsg_locked") {
    if (interesting_sk($sk)) {
        tp = tcp_sk($sk);
        size_queued = tp->write_seq - tp->snd_nxt;
        printf("%s: sk=%p size=%d size_queue=%d BEGIN\n", ihdr(), $sk, $size, size_queued);
    }
}

probe kernel.function("tcp_sendmsg_locked").return {
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: sk=%p size=%d ENDED\n", ohdr(), sk, @entry($size));
    }
}

function dump_tcp_mtu_probe_info(sk)
{
    sk = cast_sock(sk);
    icsk = inet_csk(sk);
    tp = tcp_sk(sk);
    net = sock_net(sk);
    hdr = ehdr();

    printf("%s: icsk_mtup enabled=%d\n", hdr, icsk->icsk_mtup->enabled);
    printf("%s: icsk_mtup.probe_size=%d\n", hdr, icsk->icsk_mtup->probe_size);
    printf("%s: icsk_ca_state=%d\n", hdr, icsk->icsk_ca_state);
    printf("%s: snd_cwnd=%d\n", hdr, tp->snd_cwnd);
    printf("%s: tp->rx_opt.num_sacks=%d\n", hdr, tp->rx_opt->num_sacks);
    printf("%s: tp->rx_opt.dsack=%d\n", hdr, tp->rx_opt->dsack);

    printf("%s: snd_una=%d\n", hdr, tp->snd_una);
    printf("%s: snd_nxt=%d\n", hdr, tp->snd_nxt);
    printf("%s: snd_write_seq=%d\n", hdr, tp->write_seq);
    printf("%s: size_sendable write_seq-snd_nxt=%d\n", hdr, tp->write_seq - tp->snd_nxt);

    printf("%s: icsk_mtup search_high=%d search_low=%d\n", hdr,
            icsk->icsk_mtup->search_high,
            icsk->icsk_mtup->search_low);
    printf("%s: icsk_mtup.probe_timestamp=%d jiffies=%d delta=%d\n", hdr,
            icsk->icsk_mtup->probe_timestamp, jiffies(),
            icsk->icsk_mtup->probe_timestamp - (jiffies() & 0xFFFFFFFF));
    printf("%s: mtu_probe.probe_seq_end=%d\n", hdr, tp->mtu_probe->probe_seq_end);
    printf("%s: mss_clamp=%d\n", hdr, tp->rx_opt->mss_clamp);
    printf("%s: mss_cache=%d\n", hdr, tp->mss_cache);
    printf("%s: net.ipv4.sysctl_tcp_probe_threshold=%d\n", hdr, net->ipv4->sysctl_tcp_probe_threshold);
    printf("%s: net.ipv4.sysctl_tcp_probe_interval=%d\n", hdr, net->ipv4->sysctl_tcp_probe_interval);
}

%( @TRACE_SYNC_MSS == 1 %?
probe kernel.function("tcp_sync_mss") {
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: parms: %s\n", ihdr(), $$parms);
        printf("%s: $pmtu=%d"
                " old mss_cache=%d"
                " icsk->icsk_pmtu_cookie=%d"
                " icsk->icsk_mtup.search_high=%d"
                "\n", ehdr(),
                $pmtu,
                tcp_sk(sk)->mss_cache,
                inet_csk(sk)->icsk_pmtu_cookie,
                inet_csk(sk)->icsk_mtup->search_high);
        print_backtrace_fileline();
    }
}

probe kernel.function("tcp_sync_mss").return {
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: new mss_cache=%d"
                " icsk->icsk_pmtu_cookie=%d"
                " icsk->icsk_mtup.search_high=%d"
                "\n", ehdr(),
                tcp_sk(sk)->mss_cache,
                inet_csk(sk)->icsk_pmtu_cookie,
                inet_csk(sk)->icsk_mtup->search_high);
        printf("%s: sk=%p\n", ohdr(), sk);
    }
}

probe kernel.statement("tcp_sync_mss@net/ipv4/tcp_output.c:*") {
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: locals: %s\n", ehdrl(), $$locals);
    }
}
%:%)

probe kernel.function("tcp_send_mss").return {
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: sk=%p $return=%d size_goal=%d\n", ehdr(), sk, $return, kernel_long(@entry($size_goal)));
    }
}

probe kernel.function("tcp_mtu_probe").callee("sk_stream_alloc_skb") {
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: PROBE SEND call sk_stream_alloc_skb vars: %s\n", ehdr(), $$vars);
        print_backtrace();
    }
}

probe kernel.function("tcp_mtup_probe_failed") {
    if (interesting_sk($sk)) {
        printf("%s: PROBE FAIL vars: %s\n", ehdr(), $$vars);
        print_backtrace();
    }
}

probe kernel.function("tcp_mtup_probe_success") {
    if (interesting_sk($sk)) {
        printf("%s: PROBE PASS vars: %s\n", ehdr(), $$vars);
        print_backtrace();
    }
}

probe kernel.function("tcp_mtu_probe@net/ipv4/tcp_output.c") {
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: parms: %s\n", ehdr(), $$parms);
        dump_tcp_mtu_probe_info(sk);
    }
}

probe kernel.statement("tcp_mtu_probe@net/ipv4/tcp_output.c:*") {
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: locals: %s\n", ehdrl(), $$locals);
    }
}

probe kernel.function("tcp_write_xmit") {
    if (!interesting_sk($sk)) {
        next;
    }
    sk = $sk;
    tp = tcp_sk(sk);
    size_queued = tp->write_seq - tp->snd_nxt;
    printf("%s: sk=%p push_one=%d size_queued=%d\n",
            ehdr(), sk, $push_one, size_queued);
}

// (SKIP) trace mtu_to_mss and mss_to_mtu calculations:
%( @TRACE_MTU_MSS_CONV == 1 %?
probe kernel.function("tcp_mtu_to_mss")
{
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: prams: %s\n", ihdr(), $$parms);
    }
}

probe kernel.function("tcp_mtu_to_mss").return {
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: return %d mss=%d delta=%d\n", ohdr(),
                $return, @entry($pmtu), @entry($pmtu) - $return);
    }
}

probe kernel.function("tcp_mss_to_mtu")
{
    sk = $sk;
    if (interesting_sk(sk)) {
        printf("%s: parms: %s\n", ihdr(), $$parms);
    }
}

probe kernel.function("tcp_mss_to_mtu").return {
    sk = @entry($sk);
    if (interesting_sk(sk)) {
        printf("%s: return %d mss=%d delta=%d\n", ohdr(),
                $return, @entry($mss), $return - @entry($mss));
    }
}
%:%)
